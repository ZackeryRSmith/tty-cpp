#pragma once
#include <cstdint>
#include <string>

namespace Term {
enum Key : std::int32_t {
    NO_KEY = -1,
    NUL,                
    CTRL_A,             
    CTRL_B,             
    CTRL_C,             
    CTRL_D,             
    CTRL_E,             
    CTRL_F,             
    CTRL_G,             
    BACKSPACE,          
    TAB,
    ENTER,              
    LF,                 
    CTRL_K,             
    CTRL_L,             
    CR, // mapped to ENTER
    CTRL_N,            
    CTRL_O,             
    CTRL_P,             
    CTRL_Q,             
    CTRL_R,             
    CTRL_S,             
    CTRL_T,             
    CTRL_U,             
    CTRL_V,             
    CTRL_W,             
    CTRL_X,             
    CTRL_Y,             
    CTRL_Z,             
    ESC,                
    CTRL_SLASH,         
    CTRL_CLOSE_BRACKET, 
    CTRL_CARET,         
    CTRL_UNDERSCORE,    
    SPACE,              
    EXCLAMATION_MARK,   
    QUOTE,              
    HASH,               
    DOLLAR,             
    PERCENT,            
    AMPERSAND,          
    APOSTROPHE,         
    OPEN_PARENTHESIS,   
    CLOSE_PARENTHESIS,  
    ASTERISK,           
    PLUS,               
    COMMA,              
    HYPHEN,             
    MINUS,              
    PERIOD,             
    SLASH,              
    ZERO,               
    ONE,                
    TWO,                
    THREE,              
    FOUR,               
    FIVE,               
    SIX,                
    SEVEN,              
    EIGHT,              
    NINE,               
    COLON,              
    SEMICOLON,          
    LESS_THAN,          
    OPEN_CHEVRON,       
    EQUAL,              
    GREATER_THAN,       
    CLOSE_CHEVRON,      
    QUESTION_MARK,      
    AROBASE,            
    A,                  
    B,                  
    C,                  
    D,                  
    E,                  
    F,                  
    G,                  
    H,                  
    I,                  
    J,                  
    K,                  
    L,                  
    M,                  
    N,                  
    O,                  
    P,                  
    Q,                  
    R,                  
    S,                  
    T,                  
    U,                  
    V,                  
    W,                  
    X,                  
    Y,                  
    Z,                  
    OPEN_BRACKET,       
    BACKSLASH,          
    CLOSE_BRACKET,      
    CARET,              
    UNDERSCORE,         
    GRAVE_ACCENT,       
    a,                  
    b,                  
    c,                  
    d,                  
    e,                  
    f,                  
    g,                  
    h,                  
    i,                  
    j,                  
    k,                  
    l,                  
    m,                  
    n,                  
    o,                  
    p,                  
    q,                  
    r,                  
    s,                  
    t,                  
    u,                  
    v,                  
    w,                  
    x,                  
    y,                  
    z,                  
    OPEN_BRACE,         
    VERTICAL_BAR,       
    CLOSE_BRACE,        
    TILDE,              
    DEL,        
  
    // extended ANSII
    ALT_ENTER = 256,
    ARROW_LEFT,
    ARROW_RIGHT,
    ARROW_UP,
    ARROW_DOWN,
    CTRL_UP,
    CTRL_DOWN,
    CTRL_RIGHT,
    CTRL_LEFT,
    NUMERIC_5,
    HOME,
    INSERT,
    END,
    PAGE_UP,
    PAGE_DOWN,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
  
    // modifier keys
    CTRL = -AROBASE,
    ALT = (1 << 9)
};

bool is_ASCII(const Key&); // detect if Key is convertible to ANSII 
bool is_extended_ASCII(const Key&); // detect if Key is convertible to Extended ANSII
bool is_ALT(const Key&); // detect if Key is being effected by the ALT modifier
bool is_CTRL(const Key&); // detect if Key is being effected by the CTRL modifier

// waits for a key press, translates escape codes
// if Term:Terminal is not enabling the keyboard it'll loop for infinity
std::int32_t read_key();

// If there was a key press, returns the translated key from escape codes,
// otherwise returns 0. If the escape code is not supported it returns a
// negative number.
// if Term::Terminal is not enabling the keyboard it'll always return 0
std::int32_t read_key0();

// returns the stdin as a string
// waits until the EOT signal is sent
// if Term::Terminal is not enabling the keyboard this function will wait until
// the user presses CTRL+D (which sends the EOT signal)
std::string read_stdin();
} // namespace Term

